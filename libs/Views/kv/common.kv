<CustomVideo>:


<TimeTip>:
    size_hint: None, None
    size: dp(70), dp(20)
    MDLabel:
        id: tip_text
        text: root.text
        font_size: 12
        font_name: 'assets/fonts/Roboto-Bold.ttf'
        halign: 'center'
        valign: 'center'


<CustomVideoPlayer>:
    size_hint: 1, None
    height: root.heightCalculated
    MDRelativeLayout:
        id: layout
        CustomVideo:
            id: video
            source: root.source
            preview: root.preview
            state: root.state
            fit_mode: 'contain'
        MDIcon:
            id: play_big
            icon: 'play'
            font_size: dp(100)
            size_hint: None, None
            size: self.texture_size
            opacity: 1 if root.state != 'play' else 0
            pos_hint: {'center_x': 0.5, 'center_y': 0.5}
        MDAnchorLayout:
            id: controls
            anchor_y: 'bottom'
            padding: [dp(5), 0, dp(5), dp(5)]
            MDCard:
                id: controls_panel
                size_hint: 1, None
                md_bg_color: app.theme_cls.bg_light
                height: dp(30)
                radius: [8, 8, 8, 8]
                MDBoxLayout:
                    id: controls_box
                    orientation: 'horizontal'
                    spacing: dp(10)
                    padding: [dp(10), 0, dp(10), 0]
                    IconButton:
                        id: btn_play_pause
                        icon: 'play' if root.state != 'play' else 'pause'
                        size_hint: None, None
                        size: self.texture_size
                        on_release: root.play_pause()
                        pos_hint: {'center_y': 0.5}
                    RoundedProgressBar:
                        id: progress
                        orientation: 'horizontal'
                        value: root.progress
                        size_hint: 1, None
                        height: dp(16)
                        pos_hint: {'center_y': 0.5}
                        color: [1, 1, 1, 0.05] if root.progress > 0 else [0, 0, 0, 0]
                        back_color: [1, 1, 1, 0.05]
                        on_touch_move: root.on_touch_move_progress(*args)
                        on_touch_down: root.on_touch_down_progress(*args)
                        on_touch_up: root.on_touch_up_progress(*args)
                        TimeTip:
                            id: time_tip
                            opacity: 0
                    MDFlatButton:
                        id: progress_label
                        text: f'{root.text_progress} / {root.text_duration}'
                        font_size: 12
                        font_name: 'assets/fonts/Roboto-Bold.ttf'
                        valign: 'center'
                        pos_hint: {'center_y': 0.5}
                        size_hint_y: None
                        height: controls_box.height
                    IconButton:
                        id: volume
                        icon: 'volume-mute' if root.muted else 'volume-low' if root._volume < 0.33 else 'volume-medium' if root._volume < 0.66 else 'volume-high'
                        size_hint: None, None
                        size: self.texture_size
                        pos_hint: {'center_y': 0.5}
                        on_release: root.volume_muter()
                    IconButton:
                        id: fullscreen
                        icon: 'fullscreen' if not root.fullscreen else 'fullscreen-exit'
                        size_hint: None, None
                        size: self.texture_size
                        pos_hint: {'center_y': 0.5}
                        on_release: root.fullscreen = not root.fullscreen


<MDDialogConfirm>

    DialogContainer:
        id: container
        orientation: "vertical"
        size_hint_y: None
        height: self.minimum_height
        padding: "24dp", "24dp", "8dp", "8dp"
        radius: root.radius
        md_bg_color:
            root.theme_cls.bg_dark \
            if not root.md_bg_color else root.md_bg_color
        spacing: dp(10)

        MDLabel:
            id: title
            text: root.title
            font_style: "H6"
            bold: True
            markup: True
            size_hint_y: None
            height: self.texture_size[1]
            valign: "top"

        AnchorLayout:
            id: root_button_box
            size_hint_y: None
            height: "52dp"
            anchor_x: "right"

            MDBoxLayout:
                id: button_box
                adaptive_size: True
                spacing: "8dp"


<MDCardButton@MDCard+ButtonBehavior>:


<HoverMDCardButton@HoverMDCard+ButtonBehavior>:


<HoverMDCardNoScaleButton@HoverMDCardNoScale+ButtonBehavior>:


<LoaderLabel>:
    canvas.before:
        Color:
            rgba: self.loading_color
        RoundedRectangle:
            pos: self.pos
            size: self.default_size_x, self.default_size_y
            radius: [8]


<HoverOneLineListItem>:
    hover_bg: 1, 1, 1, 0
    new_bg_color: 1, 1, 1, 0.02
    hr: 8
    ripple_alpha: 0.2
    radius: [self.hr, self.hr]
    canvas.before:
        Color:
            rgba: self.new_bg_color
        RoundedRectangle:
            size: self.size
            pos: self.pos
            radius: [self.hr, self.hr, self.hr, self.hr]
    canvas.after:
        Color:
            rgba: self.hover_bg
        RoundedRectangle:
            size: self.size
            pos: self.pos
            radius: [self.hr, self.hr, self.hr, self.hr]
    on_enter:
        self.hover_bg = 0.4, 0.4, 0.4, (0.08 * int(not self.disabled))
    on_leave:
        self.hover_bg = 1, 1, 1, 0


<HoverMDCardNoScale>:
    hr: 8
    hover_bg: 1, 1, 1, 0
    my_bg: 1, 1, 1, 1
    canvas.before:
        Color:
            rgba: self.my_bg
        RoundedRectangle:
            size: self.size
            pos: self.pos
            radius: [self.hr, self.hr, self.hr, self.hr]
    canvas.after:
        Color:
            rgba: self.hover_bg
        RoundedRectangle:
            size: self.size
            pos: self.pos
            radius: [self.hr, self.hr, self.hr, self.hr]
    on_enter:
        self.hover_bg = 0.4, 0.4, 0.4, 0.08
    on_leave:
        self.hover_bg = 1, 1, 1, 0


<HoverMDCard>:
    hr: 8
    hover_bg: 1, 1, 1, 0
    my_bg: 1, 1, 1, 1
    canvas.before:
        Color:
            rgba: self.my_bg
        RoundedRectangle:
            size: self.size
            pos: self.pos
            radius: [self.hr, self.hr, self.hr, self.hr]
    canvas.after:
        Color:
            rgba: self.hover_bg
        RoundedRectangle:
            size: self.size
            pos: self.pos
            radius: [self.hr, self.hr, self.hr, self.hr]
    on_enter:
        self.hover_bg = 0.4, 0.4, 0.4, 0.08
    on_leave:
        self.hover_bg = 1, 1, 1, 0


<HoverMDBoxLayout>:
    hover_bg: 1, 1, 1, 0
    hr: 8
    canvas.after:
        Color:
            rgba: self.hover_bg
        RoundedRectangle:
            size: self.size
            pos: self.pos
            radius: [self.hr, self.hr, self.hr, self.hr]
    on_enter:
        self.hover_bg = 0.4, 0.4, 0.4, 0.08
    on_leave:
        self.hover_bg = 1, 1, 1, 0


<HoverMDIconButton>:
    hover_bg: 1, 1, 1, 0
    hr: 8
    ripple_alpha: 0.2
    radius: [self.hr, self.hr]
    canvas.after:
        Color:
            rgba: self.hover_bg
        RoundedRectangle:
            size: self.size
            pos: self.pos
            radius: [self.hr, self.hr, self.hr, self.hr]
    on_enter:
        self.hover_bg = 0.4, 0.4, 0.4, (0.08 * int(not self.disabled))
    on_leave:
        self.hover_bg = 1, 1, 1, 0


<NoHoverMDFlatButton>:
    hover_bg: 1, 1, 1, 0
    new_bg_color: 1, 1, 1, 0.02
    hr: 8
    ripple_alpha: 0.2
    radius: [self.hr, self.hr]
    canvas.before:
        Color:
            rgba: self.new_bg_color
        RoundedRectangle:
            size: self.size
            pos: self.pos
            radius: [self.hr, self.hr, self.hr, self.hr]


<HoverMDFlatButton>:
    hover_bg: 1, 1, 1, 0
    new_bg_color: 1, 1, 1, 0.02
    hr: 8
    ripple_alpha: 0.2
    radius: [self.hr, self.hr]
    canvas.before:
        Color:
            rgba: self.new_bg_color
        RoundedRectangle:
            size: self.size
            pos: self.pos
            radius: [self.hr, self.hr, self.hr, self.hr]
    canvas.after:
        Color:
            rgba: self.hover_bg
        RoundedRectangle:
            size: self.size
            pos: self.pos
            radius: [self.hr, self.hr, self.hr, self.hr]
    on_enter:
        self.hover_bg = 0.4, 0.4, 0.4, (0.08 * int(not self.disabled))
    on_leave:
        self.hover_bg = 1, 1, 1, 0


<TooltipMDFlatButtonNoHover@MDFlatButton+MDTooltip>:
    ttext: ''
    tooltip_text: self.ttext if not self.disabled else ''


<TooltipMDIconButtonNoHover@MDIconButton+MDTooltip>:
    ttext: ''
    tooltip_text: self.ttext if not self.disabled else ''


<TooltipMDFlatButton@HoverMDFlatButton+MDTooltip>:
    ttext: ''
    tooltip_display_delay: app.tooltip_show_delay
    tooltip_text: self.ttext if not self.disabled else ''


<TooltipMDIconButton@HoverMDIconButton+MDTooltip>:
    ttext: ''
    tooltip_display_delay: app.tooltip_show_delay
    tooltip_text: self.ttext if not self.disabled else ''


<RoundedProgressBar>
    canvas:
        Clear
        Color:
            rgba:
                self.theme_cls.divider_color \
                if not self.back_color else \
                self.back_color
        RoundedRectangle:
            size:
                (self.width, self.height) \
                if self.orientation == "horizontal" else \
                (self.width, self.height)
            pos:
                (self.x, self.center_y - self.height / 2) \
                if self.orientation == "horizontal" else \
                (self.center_x - self.width / 2, self.y)
            radius: self.radius
        Color:
            rgba:
                self.theme_cls.primary_color if not self.color else self.color
        RoundedRectangle:
            size:
                (self.width * self.value_normalized, self.height if self.height else dp(4)) \
                if self.orientation == "horizontal" else \
                (self.width, self.height * self.value_normalized)
            pos:
                (self.width * (1 - self.value_normalized) + self.x \
                if self.reversed else self.x + self._x, self.center_y - self.height / 2) \
                if self.orientation == "horizontal" \
                else (self.center_x - self.width / 2, self.height \
                * (1 - self.value_normalized) + self.y if self.reversed \
                else self.y)
            radius: self.radius